// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SekerTeshisApp.Data.Concrete;

#nullable disable

namespace SekerTeshisApp.Data.Migrations
{
    [DbContext(typeof(SekerTeshisAppContext))]
    partial class SekerTeshisAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SekerTeshis.Entity.Diabetes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDiabetUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Diabetes");
                });

            modelBuilder.Entity("SekerTeshis.Entity.DiabetesDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiabetesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("MeasureDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiabetesId");

                    b.ToTable("DiabetesDetail");
                });

            modelBuilder.Entity("SekerTeshis.Entity.Exercises", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ExcersiesImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExercisesType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("SekerTeshis.Entity.Food", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<string>("FoodImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("SekerTeshis.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SekerTeshis.Entity.Diabetes", b =>
                {
                    b.HasOne("SekerTeshis.Entity.User", "User")
                        .WithOne("Diabetess")
                        .HasForeignKey("SekerTeshis.Entity.Diabetes", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SekerTeshis.Entity.DiabetesDetail", b =>
                {
                    b.HasOne("SekerTeshis.Entity.Diabetes", "Diabetes")
                        .WithMany("DiabetesDetail")
                        .HasForeignKey("DiabetesId");

                    b.Navigation("Diabetes");
                });

            modelBuilder.Entity("SekerTeshis.Entity.Exercises", b =>
                {
                    b.HasOne("SekerTeshis.Entity.DiabetesDetail", "DiabetesDetail")
                        .WithOne("Exercises")
                        .HasForeignKey("SekerTeshis.Entity.Exercises", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiabetesDetail");
                });

            modelBuilder.Entity("SekerTeshis.Entity.Food", b =>
                {
                    b.HasOne("SekerTeshis.Entity.DiabetesDetail", "DiabetesDetail")
                        .WithOne("Food")
                        .HasForeignKey("SekerTeshis.Entity.Food", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiabetesDetail");
                });

            modelBuilder.Entity("SekerTeshis.Entity.Diabetes", b =>
                {
                    b.Navigation("DiabetesDetail");
                });

            modelBuilder.Entity("SekerTeshis.Entity.DiabetesDetail", b =>
                {
                    b.Navigation("Exercises")
                        .IsRequired();

                    b.Navigation("Food")
                        .IsRequired();
                });

            modelBuilder.Entity("SekerTeshis.Entity.User", b =>
                {
                    b.Navigation("Diabetess")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
